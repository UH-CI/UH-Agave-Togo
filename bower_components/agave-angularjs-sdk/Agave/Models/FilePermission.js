/**
 *AgavePlatformScienceAPILib
 *
 * This file was automatically generated by APIMATIC BETA v2.0 on 10/07/2015
 */

function FilePermission() {
    this.username = undefined
    this.internalUsername = undefined
    this.permission = undefined
    this.created = undefined
    this.lastUpdated = undefined
    this.recursive = false;
    this.id = undefined

}

//Make instanceof work


/**
 *The username to whom this permission grant applies
 *
 * @return: string
 */
FilePermission.prototype.getUsername = function () {

    return this.username;
}


FilePermission.prototype.setUsername = function (value) {
    this.username = value;
}


/**
 *The internal user associated with this permission
 *
 * @return: string|null
 */
FilePermission.prototype.getInternalUsername = function () {

    return this.internalUsername;
}


FilePermission.prototype.setInternalUsername = function (value) {
    this.internalUsername = value;
}


/**
 *The permissions granted to the user
 *
 * @return: PermissionStanza
 */
FilePermission.prototype.getPermission = function () {

    return this.permission;
}


FilePermission.prototype.setPermission = function (value) {
    this.permission = value;
}


/**
 *The date the permission was created
 *
 * @return: DateTime
 */
FilePermission.prototype.getCreated = function () {

    return this.created;
}


FilePermission.prototype.setCreated = function (value) {
    this.created = value;
}


/**
 *The date the permission was last updated
 *
 * @return: DateTime
 */
FilePermission.prototype.getLastUpdated = function () {

    return this.lastUpdated;
}


FilePermission.prototype.setLastUpdated = function (value) {
    this.lastUpdated = value;
}


/**
 *The unique id of this permission
 *
 * @return: string
 */
FilePermission.prototype.getId = function () {

    return this.id;
}


FilePermission.prototype.setId = function (value) {
    this.id = value;
}


/**
 *Whether the permissions apply recursively
 *
 * @return: bool
 */
FilePermission.prototype.isRecursive = function () {

    return this.recursive;
}


FilePermission.prototype.setRecursive = function (value) {
    this.recursive = value;
}



