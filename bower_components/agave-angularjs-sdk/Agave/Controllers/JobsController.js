/** *AgavePlatformScienceAPILib * * This file was automatically generated by APIMATIC BETA v2.0 on 10/07/2015 */'use strict';angular.module('AgavePlatformScienceAPILib').factory('JobsController', ['$q', 'Configuration', 'HttpClient', 'APIHelper', function ($q, Configuration, HttpClient, APIHelper) {    return {        /**         * Search jobs         * @param {string|null} query                    The query to be appended to the url.         */        searchJobs: function (query) {            //prepare query string for API call            var baseUri = Configuration.BASEURI;            var queryBuilder = query ? baseUri + '/jobs/v2/?' + query : baseUri + '/jobs/v2/';            //validate and preprocess url            var queryUrl = APIHelper.cleanUrl(queryBuilder);            //prepare headers            var headers = {                'accept': 'application/json',                'Authorization': 'Bearer ' + Configuration.oAuthAccessToken            };            //prepare and invoke the API call request to fetch the response            var config = {                method: 'GET',                queryUrl: queryUrl,                headers: headers,                cache: false            };            var response = new HttpClient(config);            //Create promise to return            var deferred = $q.defer();            //process response            response.then(function (result) {                deferred.resolve(result.body);            }, function (result) {                deferred.reject(APIHelper.appendContext({                    errorMessage: 'HTTP Response Not OK',                    errorCode: result.code,                    errorResponse: result.message                }, result.getContext()));            });            return deferred.promise;        },        /**         * Get a list of jobs the authenticated user had submitted.         * @param {string|null} appId    Optional parameter: The id of the app run by the job.         * @param {string|null} archive    Optional parameter: Boolean flag stating whether the job output was archived. (Acceptable values are: 'true', 'false')         * @param {string|null} archivePath    Optional parameter: Path on the archive system where the job output was archived if the archive flag was true.         * @param {string|null} archiveSystem    Optional parameter: The id of the system where the job output was archived if the archive flag was true.         * @param {string|null} batchQueue    Optional parameter: The system queue in which the job ran.         * @param {string|null} executionSystem    Optional parameter: The execution system where the job ran.         * @param {string|null} id    Optional parameter: The id of the job.         * @param {string|null} inputs    Optional parameter: The job inputs. Note, this is a partial text search.         * @param {int|null} limit    Optional parameter: Boolean flag indicating whether or not to show deleted jobs. Defaults to false.         * @param {string|null} localId    Optional parameter: The local job id of the job on the execution system.         * @param {string|null} maxRuntime    Optional parameter: The maximum run time of the job in HH:mm:ss format.         * @param {string|null} memoryPerNode    Optional parameter: The memory requested by the job specified in GB.         * @param {string|null} name    Optional parameter: The name of the job.         * @param {int|null} nodeCount    Optional parameter: The number of nodes requested for the job.         * @param {int|null} offset    Optional parameter: Boolean flag indicating whether or not to show deleted jobs. Defaults to false.         * @param {string|null} outputPath    Optional parameter: The remote work directory path of the job.         * @param {string|null} parameters    Optional parameter: The job parameters. Note, this is a partial text search.         * @param {int|null} processorsPerNode    Optional parameter: The number of processors per node requested by the job.         * @param {int|null} retries    Optional parameter: The number of retry attempts made on this job.         * @param {string|null} startTime    Optional parameter: The date the job began running. Results are rounded by day. You may specify using YYYY-MM-DD format or free form timeframes such as 'yesterday' or '3 days ago'.         * @param {JobStatusTypeEnum|null} status    Optional parameter: The job status.         * @param {string|null} submitTime    Optional parameter: The date the job was submitted to the remote execution system to run. Results are rounded by day. You may specify using YYYY-MM-DD format or free form timeframes such as 'yesterday' or '3 days ago'.         * @param {string|null} visible    Optional parameter: Boolean flag indicating whether or not to show deleted jobs. Defaults to false. (Acceptable values are: 'true', 'false')         *         * @return {promise<array>}         */        listJobs: function (appId, archive, archivePath, archiveSystem, batchQueue, executionSystem, id, inputs, limit, localId, maxRuntime, memoryPerNode, name, nodeCount, offset, outputPath, parameters, processorsPerNode, retries, startTime, status, submitTime, visible) {            //Assign default values            archive = archive || 'true';            visible = visible || 'true';            //prepare query string for API call            var baseUri = Configuration.BASEURI;            var queryBuilder = baseUri + '/jobs/v2/';            name = name === '' ? null : name;            //Process query parameters            queryBuilder = APIHelper.appendUrlWithQueryParameters(queryBuilder, {                // 'naked': true,                'appId': appId,                'archive': (null !== archive) ? archive : 'true',                'archivePath': archivePath,                'archiveSystem': archiveSystem,                'batchQueue': batchQueue,                'executionSystem': executionSystem,                'id': id,                'inputs': inputs,                'limit': limit,                'localId': localId,                'maxRuntime': maxRuntime,                'memoryPerNode': memoryPerNode,                // 'name': name,                'name': name,                'nodeCount': nodeCount,                'offset': offset,                'outputPath': outputPath,                'parameters': parameters,                'processorsPerNode': processorsPerNode,                'retries': retries,                'startTime': startTime,                'status': (status !== null) ? status : null,                'submitTime': submitTime,                'visible': (null !== visible) ? visible : 'true'            });            //validate and preprocess url            var queryUrl = APIHelper.cleanUrl(queryBuilder);            //prepare headers            var headers = {                'accept': 'application/json',                'Authorization': 'Bearer ' + Configuration.oAuthAccessToken            };            //prepare and invoke the API call request to fetch the response            var config = {                method: 'GET',                queryUrl: queryUrl,                headers: headers,                cache: false            };            var response = new HttpClient(config);            //Create promise to return            var deferred = $q.defer();            //process response            response.then(function (result) {                deferred.resolve(result.body);            }, function (result) {                deferred.reject(APIHelper.appendContext({                    errorMessage: 'HTTP Response Not OK',                    errorCode: result.code,                    errorResponse: result.message                }, result.getContext()));            });            return deferred.promise;        },        /**         * Submit a new job request.         * @param {JobRequest} body    Required parameter: The JSON description of the job to submit.         *         * @return {promise<Job>}         */        createSubmitJob: function (body) {            //prepare query string for API call            var baseUri = Configuration.BASEURI;            var queryBuilder = baseUri + '/jobs/v2/';            //validate and preprocess url            var queryUrl = APIHelper.cleanUrl(queryBuilder);            //prepare headers            var headers = {                'accept': 'application/json',                'content-type': 'application/json; charset=utf-8',                'Authorization': 'Bearer ' + Configuration.oAuthAccessToken            };            //Remove null values            APIHelper.cleanObject(body);            //prepare and invoke the API call request to fetch the response            var config = {                method: 'POST',                queryUrl: queryUrl,                headers: headers,                body: body            };            var response = new HttpClient(config);            //Create promise to return            var deferred = $q.defer();            //process response            response.then(function (result) {                deferred.resolve(result.body);            }, function (result) {                deferred.reject(APIHelper.appendContext({                    errorMessage: 'HTTP Response Not OK',                    errorCode: result.code,                    errorResponse: result.message                }, result.getContext()));            });            return deferred.promise;        },        /**         * Get details of the job with the specific job id.         * @param {int} jobId    Required parameter: The id of the job.         * @param {bool} naked    Required parameter: Example: true         *         * @return {promise<Job>}         */        getJobDetails: function (jobId, naked) {            //Assign default values            // naked = naked || true;            //prepare query string for API call            var baseUri = Configuration.BASEURI;            var queryBuilder = baseUri + '/jobs/v2/{jobId}';            //Process template parameters            queryBuilder = APIHelper.appendUrlWithTemplateParameters(queryBuilder, {                'jobId': jobId            });            //Process query parameters            queryBuilder = APIHelper.appendUrlWithQueryParameters(queryBuilder, {                'naked': naked            });            //validate and preprocess url            var queryUrl = APIHelper.cleanUrl(queryBuilder);            //prepare headers            var headers = {                'accept': 'application/json',                'Authorization': 'Bearer ' + Configuration.oAuthAccessToken            };            //prepare and invoke the API call request to fetch the response            var config = {                method: 'GET',                queryUrl: queryUrl,                headers: headers,            };            var response = new HttpClient(config);            //Create promise to return            var deferred = $q.defer();            //process response            response.then(function (result) {                deferred.resolve(result.body);            }, function (result) {                deferred.reject(APIHelper.appendContext({                    errorMessage: 'HTTP Response Not OK',                    errorCode: result.code,                    errorResponse: result.message                }, result.getContext()));            });            return deferred.promise;        },        /**         * Deletes a job from the user's history.         * @param {string} jobId    Required parameter: The id of the job.         *         * @return {promise<void>}         */        deleteJob: function (jobId) {            //prepare query string for API call            var baseUri = Configuration.BASEURI;            var queryBuilder = baseUri + '/jobs/v2/{jobId}';            //Process template parameters            queryBuilder = APIHelper.appendUrlWithTemplateParameters(queryBuilder, {                'jobId': jobId            });            //Process query parameters            queryBuilder = APIHelper.appendUrlWithQueryParameters(queryBuilder, {                'naked': true            });            //validate and preprocess url            var queryUrl = APIHelper.cleanUrl(queryBuilder);            //prepare headers            var headers = {                'Authorization': 'Bearer ' + Configuration.oAuthAccessToken            };            //prepare and invoke the API call request to fetch the response            var config = {                method: 'DELETE',                queryUrl: queryUrl,                headers: headers,            };            var response = new HttpClient(config);            //Create promise to return            var deferred = $q.defer();            //process response            response.then(function (result) {                deferred.resolve(result.body);            }, function (result) {                deferred.reject(APIHelper.appendContext({                    errorMessage: 'HTTP Response Not OK',                    errorCode: result.code,                    errorResponse: result.message                }, result.getContext()));            });            return deferred.promise;        },        /**         * Deletes all permissions on an job.         * @param {string} jobId    Required parameter: The id of the job.         *         * @return {promise<void>}         */        deleteClearJobPermissions: function (jobId) {            //prepare query string for API call            var baseUri = Configuration.BASEURI;            var queryBuilder = baseUri + '/jobs/v2/{jobId}/pems';            //Process template parameters            queryBuilder = APIHelper.appendUrlWithTemplateParameters(queryBuilder, {                'jobId': jobId            });            //validate and preprocess url            var queryUrl = APIHelper.cleanUrl(queryBuilder);            //prepare headers            var headers = {                'Authorization': 'Bearer ' + Configuration.oAuthAccessToken            };            //prepare and invoke the API call request to fetch the response            var config = {                method: 'DELETE',                queryUrl: queryUrl,                headers: headers,            };            var response = new HttpClient(config);            //Create promise to return            var deferred = $q.defer();            //process response            response.then(function (result) {                deferred.resolve(result.body);            }, function (result) {                deferred.reject(APIHelper.appendContext({                    errorMessage: 'HTTP Response Not OK',                    errorCode: result.code,                    errorResponse: result.message                }, result.getContext()));            });            return deferred.promise;        },        /**         * Deletes all permissions for the given user on an job.         * @param {string} jobId    Required parameter: The id of the job for which to delete the user permissions.         * @param {string} username    Required parameter: The username for whom to delete permissions         *         * @return {promise<void>}         */        deleteJobPermission: function (jobId, username) {            //prepare query string for API call            var baseUri = Configuration.BASEURI;            var queryBuilder = baseUri + '/jobs/v2/{jobId}/pems/{username}';            //Process template parameters            queryBuilder = APIHelper.appendUrlWithTemplateParameters(queryBuilder, {                'jobId': jobId,                'username': username            });            //Process query parameters            // queryBuilder = APIHelper.appendUrlWithQueryParameters(queryBuilder, {            //     'naked': true            // });            //validate and preprocess url            var queryUrl = APIHelper.cleanUrl(queryBuilder);            //prepare headers            var headers = {                'Authorization': 'Bearer ' + Configuration.oAuthAccessToken            };            //prepare and invoke the API call request to fetch the response            var config = {                method: 'DELETE',                queryUrl: queryUrl,                headers: headers,            };            var response = new HttpClient(config);            //Create promise to return            var deferred = $q.defer();            //process response            response.then(function (result) {                deferred.resolve(result.body);            }, function (result) {                deferred.reject(APIHelper.appendContext({                    errorMessage: 'HTTP Response Not OK',                    errorCode: result.code,                    errorResponse: result.message                }, result.getContext()));            });            return deferred.promise;        },        /**         * Get the status of the job.         * @param {string} jobId    Required parameter: The id of the job.         *         * @return {promise<JobStatusSummary>}         */        getJobStatus: function (jobId) {            //prepare query string for API call            var baseUri = Configuration.BASEURI;            var queryBuilder = baseUri + '/jobs/v2/{jobId}/status';            //Process template parameters            queryBuilder = APIHelper.appendUrlWithTemplateParameters(queryBuilder, {                'jobId': jobId            });            //Process query parameters            // queryBuilder = APIHelper.appendUrlWithQueryParameters(queryBuilder, {            //     'naked': true            // });            //validate and preprocess url            var queryUrl = APIHelper.cleanUrl(queryBuilder);            //prepare headers            var headers = {                'accept': 'application/json',                'Authorization': 'Bearer ' + Configuration.oAuthAccessToken            };            //prepare and invoke the API call request to fetch the response            var config = {                method: 'GET',                queryUrl: queryUrl,                headers: headers,            };            var response = new HttpClient(config);            //Create promise to return            var deferred = $q.defer();            //process response            response.then(function (result) {                deferred.resolve(result.body);            }, function (result) {                deferred.reject(APIHelper.appendContext({                    errorMessage: 'HTTP Response Not OK',                    errorCode: result.code,                    errorResponse: result.message                }, result.getContext()));            });            return deferred.promise;        },        /**         * List the output folder for a job.         * @param {string} jobId    Required parameter: The id of the job.         * @param {int|null} limit    Optional parameter: The maximum number of results returned from this query         * @param {int|null} offset    Optional parameter: The number of results skipped in the result set returned from this query         * @param {string|null} path    Optional parameter: The path to an output file or folder relative to the job output directory. This resource will follow data around as it moves from the execution system to archival storage.         *         * @return {promise<array>}         */        listJobOutputs: function (jobId, limit, offset, path) {            //Assign default values            limit = limit || 100;            offset = offset || 0;            //prepare query string for API call            var baseUri = Configuration.BASEURI;            var queryBuilder = baseUri + '/jobs/v2/{jobId}/outputs/listings/{path}';            //Process template parameters            queryBuilder = APIHelper.appendUrlWithTemplateParameters(queryBuilder, {                'jobId': jobId,                'path': path            });            //Process query parameters            queryBuilder = APIHelper.appendUrlWithQueryParameters(queryBuilder, {                // 'naked': true,                'limit': (null !== limit) ? limit : 100,                'offset': (null !== offset) ? offset : 0            });            //validate and preprocess url            var queryUrl = APIHelper.cleanUrl(queryBuilder);            //prepare headers            var headers = {                'accept': 'application/json',                'Authorization': 'Bearer ' + Configuration.oAuthAccessToken            };            //prepare and invoke the API call request to fetch the response            var config = {                method: 'GET',                queryUrl: queryUrl,                headers: headers,            };            var response = new HttpClient(config);            //Create promise to return            var deferred = $q.defer();            //process response            response.then(function (result) {                deferred.resolve(result.body);            }, function (result) {                deferred.reject(APIHelper.appendContext({                    errorMessage: 'HTTP Response Not OK',                    errorCode: result.code,                    errorResponse: result.message                }, result.getContext()));            });            return deferred.promise;        },        /**         * Download an output file from a specific job.         * @param {bool} force    Required parameter: If true, the Content-Disposition header is set to force a file download from the browser.         * @param {string} jobId    Required parameter: The id of the job.         * @param {string|null} path    Optional parameter: The path to an output file relative to the job output directory.         *         * @return {promise<binary>}         */        getDownloadJobOutput: function (force, jobId, path) {            //Assign default values            force = force || false;            //prepare query string for API call            var baseUri = Configuration.BASEURI;            var queryBuilder = baseUri + '/jobs/v2/{jobId}/outputs/media/{path}';            //Process template parameters            queryBuilder = APIHelper.appendUrlWithTemplateParameters(queryBuilder, {                'jobId': jobId,                'path': path            });            //Process query parameters            queryBuilder = APIHelper.appendUrlWithQueryParameters(queryBuilder, {                'force': force            });            //validate and preprocess url            var queryUrl = APIHelper.cleanUrl(queryBuilder);            //prepare headers            var headers = {                'Authorization': 'Bearer ' + Configuration.oAuthAccessToken            };            //prepare and invoke the API call request to fetch the response            var config = {                method: 'GET',                queryUrl: queryUrl,                headers: headers,            };            var response = new HttpClient(config);            //Create promise to return            var deferred = $q.defer();            //process response            response.then(function (result) {                deferred.resolve(result.body);            }, function (result) {                deferred.reject(APIHelper.appendContext({                    errorMessage: 'HTTP Response Not OK',                    errorCode: result.code,                    errorResponse: result.message                }, result.getContext()));            });            return deferred.promise;        },        /**         * Get the permissions granted for this job.         * @param {string} jobId    Required parameter: The id of the job.         * @param {int|null} limit    Optional parameter: The maximum number of results returned from this query         * @param {int|null} offset    Optional parameter: The number of results to skip in the result set for this query         *         * @return {promise<array>}         */        listJobPermissions: function (jobId, limit, offset) {            //Assign default values            limit = limit || 100;            offset = offset || 0;            //prepare query string for API call            var baseUri = Configuration.BASEURI;            var queryBuilder = baseUri + '/jobs/v2/{jobId}/pems';            //Process template parameters            queryBuilder = APIHelper.appendUrlWithTemplateParameters(queryBuilder, {                'jobId': jobId            });            //Process query parameters            queryBuilder = APIHelper.appendUrlWithQueryParameters(queryBuilder, {                // 'naked': true,                'limit': (null !== limit) ? limit : 100,                'offset': (null !== offset) ? offset : 0            });            //validate and preprocess url            var queryUrl = APIHelper.cleanUrl(queryBuilder);            //prepare headers            var headers = {                'accept': 'application/json',                'Authorization': 'Bearer ' + Configuration.oAuthAccessToken            };            //prepare and invoke the API call request to fetch the response            var config = {                method: 'GET',                queryUrl: queryUrl,                headers: headers,            };            var response = new HttpClient(config);            //Create promise to return            var deferred = $q.defer();            //process response            response.then(function (result) {                deferred.resolve(result.body);            }, function (result) {                deferred.reject(APIHelper.appendContext({                    errorMessage: 'HTTP Response Not OK',                    errorCode: result.code,                    errorResponse: result.message                }, result.getContext()));            });            return deferred.promise;        },        /**         * Get a specific user's permissions for a job.         * @param {string} jobId    Required parameter: The id of the job.         * @param {string} username    Required parameter: The username of the api user associated with the permission.         *         * @return {promise<PermissionModel>}         */        getJobPermission: function (jobId, username) {            //prepare query string for API call            var baseUri = Configuration.BASEURI;            var queryBuilder = baseUri + '/jobs/v2/{jobId}/pems/{username}';            //Process template parameters            queryBuilder = APIHelper.appendUrlWithTemplateParameters(queryBuilder, {                'jobId': jobId,                'username': username            });            //Process query parameters            // queryBuilder = APIHelper.appendUrlWithQueryParameters(queryBuilder, {            //     'naked': true            // });            //validate and preprocess url            var queryUrl = APIHelper.cleanUrl(queryBuilder);            //prepare headers            var headers = {                'accept': 'application/json',                'Authorization': 'Bearer ' + Configuration.oAuthAccessToken            };            //prepare and invoke the API call request to fetch the response            var config = {                method: 'GET',                queryUrl: queryUrl,                headers: headers,            };            var response = new HttpClient(config);            //Create promise to return            var deferred = $q.defer();            //process response            response.then(function (result) {                deferred.resolve(result.body);            }, function (result) {                deferred.reject(APIHelper.appendContext({                    errorMessage: 'HTTP Response Not OK',                    errorCode: result.code,                    errorResponse: result.message                }, result.getContext()));            });            return deferred.promise;        },        /**         * Get the history of this job.         * @param {string} jobId    Required parameter: The id of the job.         * @param {int|null} limit    Optional parameter: The maximum number of results returned from this query         * @param {int|null} offset    Optional parameter: The number of results skipped in the result set returned from this query         *         * @return {promise<array>}         */        getJobHistory: function (jobId, limit, offset) {            //Assign default values            limit = limit || 100;            offset = offset || 0;            //prepare query string for API call            var baseUri = Configuration.BASEURI;            var queryBuilder = baseUri + '/jobs/v2/{jobId}/history';            //Process template parameters            queryBuilder = APIHelper.appendUrlWithTemplateParameters(queryBuilder, {                'jobId': jobId            });            //Process query parameters            queryBuilder = APIHelper.appendUrlWithQueryParameters(queryBuilder, {                // 'naked': true,                'limit': (null !== limit) ? limit : 100,                'offset': (null !== offset) ? offset : 0            });            //validate and preprocess url            var queryUrl = APIHelper.cleanUrl(queryBuilder);            //prepare headers            var headers = {                'accept': 'application/json',                'Authorization': 'Bearer ' + Configuration.oAuthAccessToken            };            //prepare and invoke the API call request to fetch the response            var config = {                method: 'GET',                queryUrl: queryUrl,                headers: headers,            };            var response = new HttpClient(config);            //Create promise to return            var deferred = $q.defer();            //process response            response.then(function (result) {                deferred.resolve(result.body);            }, function (result) {                deferred.reject(APIHelper.appendContext({                    errorMessage: 'HTTP Response Not OK',                    errorCode: result.code,                    errorResponse: result.message                }, result.getContext()));            });            return deferred.promise;        },        /**         * Stops a currently running job or removes a scheduled job from the submission queue.         * @param {JobStopAction} body    Required parameter: The operation to perform.         * @param {string} jobId    Required parameter: The id of the job.         *         * @return {promise<void>}         */        createStopJob: function (body, jobId) {            //prepare query string for API call            var baseUri = Configuration.BASEURI;            var queryBuilder = baseUri + '/jobs/v2/{jobId}';            //Process template parameters            queryBuilder = APIHelper.appendUrlWithTemplateParameters(queryBuilder, {                'jobId': jobId            });            //Process query parameters            // queryBuilder = APIHelper.appendUrlWithQueryParameters(queryBuilder, {            //     'naked': true            // });            //validate and preprocess url            var queryUrl = APIHelper.cleanUrl(queryBuilder);            //prepare headers            var headers = {                'content-type': 'application/json; charset=utf-8',                'Authorization': 'Bearer ' + Configuration.oAuthAccessToken            };            //Remove null values            APIHelper.cleanObject(body);            //prepare and invoke the API call request to fetch the response            var config = {                method: 'POST',                queryUrl: queryUrl,                headers: headers,                body: body            };            var response = new HttpClient(config);            //Create promise to return            var deferred = $q.defer();            //process response            response.then(function (result) {                deferred.resolve(result.body);            }, function (result) {                deferred.reject(APIHelper.appendContext({                    errorMessage: 'HTTP Response Not OK',                    errorCode: result.code,                    errorResponse: result.message                }, result.getContext()));            });            return deferred.promise;        },        /**         * Resubmits the job with the given job id as a new job with a unique id.         * @param {JobResubmitAction} body    Required parameter: The resubmit action request         * @param {string} jobId    Required parameter: The id of the job to resubmit         *         * @return {promise<Job>}         */        createResubmitJob: function (body, jobId) {            //prepare query string for API call            var baseUri = Configuration.BASEURI;            var queryBuilder = baseUri + '/jobs/v2/{jobId}';            //Process template parameters            queryBuilder = APIHelper.appendUrlWithTemplateParameters(queryBuilder, {                'jobId': jobId            });            //Process query parameters            // queryBuilder = APIHelper.appendUrlWithQueryParameters(queryBuilder, {            //     'naked': true            // });            //validate and preprocess url            var queryUrl = APIHelper.cleanUrl(queryBuilder);            //prepare headers            var headers = {                'accept': 'application/json',                'content-type': 'application/json; charset=utf-8',                'Authorization': 'Bearer ' + Configuration.oAuthAccessToken            };            //Remove null values            APIHelper.cleanObject(body);            //prepare and invoke the API call request to fetch the response            var config = {                method: 'POST',                queryUrl: queryUrl,                headers: headers,                body: body            };            var response = new HttpClient(config);            //Create promise to return            var deferred = $q.defer();            //process response            response.then(function (result) {                deferred.resolve(result.body);            }, function (result) {                deferred.reject(APIHelper.appendContext({                    errorMessage: 'HTTP Response Not OK',                    errorCode: result.code,                    errorResponse: result.message                }, result.getContext()));            });            return deferred.promise;        },        /**         * Add a user permission for the given job.         * @param {PermissionModel} body    Required parameter: The permission add or update.         * @param {string} jobId    Required parameter: The id of the job.         *         * @return {promise<PermissionModel>}         */        addJobPermission: function (body, jobId) {            //prepare query string for API call            var baseUri = Configuration.BASEURI;            var queryBuilder = baseUri + '/jobs/v2/{jobId}/pems';            //Process template parameters            queryBuilder = APIHelper.appendUrlWithTemplateParameters(queryBuilder, {                'jobId': jobId            });            //Process query parameters            // queryBuilder = APIHelper.appendUrlWithQueryParameters(queryBuilder, {            //     'naked': true            // });            //validate and preprocess url            var queryUrl = APIHelper.cleanUrl(queryBuilder);            //prepare headers            var headers = {                'accept': 'application/json',                'content-type': 'application/json; charset=utf-8',                'Authorization': 'Bearer ' + Configuration.oAuthAccessToken            };            //Remove null values            APIHelper.cleanObject(body);            //prepare and invoke the API call request to fetch the response            var config = {                method: 'POST',                queryUrl: queryUrl,                headers: headers,                body: body            };            var response = new HttpClient(config);            //Create promise to return            var deferred = $q.defer();            //process response            response.then(function (result) {                deferred.resolve(result.body);            }, function (result) {                deferred.reject(APIHelper.appendContext({                    errorMessage: 'HTTP Response Not OK',                    errorCode: result.code,                    errorResponse: result.message                }, result.getContext()));            });            return deferred.promise;        },        /**         * Update a user permission for the given job and username         * @param {PermissionModel} body    Required parameter: The permission to update         * @param {string} jobId    Required parameter: The id of the job for which the permissions will be updated         * @param {string} username    Required parameter: The user for whom the permission will be udpated         *         * @return {promise<PermissionModel>}         */        updateJobPermission: function (body, jobId, username) {            //prepare query string for API call            var baseUri = Configuration.BASEURI;            var queryBuilder = baseUri + '/jobs/v2/{jobId}/pems/{username}';            //Process template parameters            queryBuilder = APIHelper.appendUrlWithTemplateParameters(queryBuilder, {                'jobId': jobId,                'username': username            });            //Process query parameters            // queryBuilder = APIHelper.appendUrlWithQueryParameters(queryBuilder, {            //     'naked': true            // });            //validate and preprocess url            var queryUrl = APIHelper.cleanUrl(queryBuilder);            //prepare headers            var headers = {                'accept': 'application/json',                'content-type': 'application/json; charset=utf-8',                'Authorization': 'Bearer ' + Configuration.oAuthAccessToken            };            //Remove null values            APIHelper.cleanObject(body);            //prepare and invoke the API call request to fetch the response            var config = {                method: 'POST',                queryUrl: queryUrl,                headers: headers,                body: body            };            var response = new HttpClient(config);            //Create promise to return            var deferred = $q.defer();            //process response            response.then(function (result) {                deferred.resolve(result.body);            }, function (result) {                deferred.reject(APIHelper.appendContext({                    errorMessage: 'HTTP Response Not OK',                    errorCode: result.code,                    errorResponse: result.message                }, result.getContext()));            });            return deferred.promise;        }    };}]);