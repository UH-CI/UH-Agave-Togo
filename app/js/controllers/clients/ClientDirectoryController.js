angular.module('AgaveToGo').controller('ClientDirectoryController', function ($injector, $timeout, $rootScope, $scope, $state, $stateParams, $q, $uibModal, $http, $translate, Commons, ClientsController, ActionsService, EncryptionService, PermissionsService, MessageService, $localStorage) {    $scope.offset = $scope.offset || 0;    $scope.limit = $scope.limit || 25;    $scope.systems = [];    $scope._COLLECTION_NAME = $scope._COLLECTION_NAME || 'clients';    $scope._RESOURCE_NAME = $scope._RESOURCE_NAME || 'clients';    $scope.limit = 10;    $scope.available = true;    $scope.publicOnly = null;    $scope.privateOnly = null;    $scope.sortType = 'lastModified';    $scope.sortReverse  = true;    $scope.clientsList = [];    $scope.clientsDetailsList = [];    $scope.filter = '';    $scope.query = '';    $scope.username = '';    $scope.passwd = '';          $scope.refresh = function() {        $scope.clientsList = [];        $scope.clientsDetailsList = [];        $scope.requesting = true;        ClientsController.listClients($scope.username, $scope.passwd).then(            function (response) {              $scope.systems = response.result;              clientsController.searchclients(                $scope.query              )                .then(                  function(response){                    $scope[$scope._COLLECTION_NAME] = [];                    _.each(response.result, function(app){                      if ($scope.query.indexOf("available.eq=false") === -1){                        app.available = true;                        $scope[$scope._COLLECTION_NAME].push(app);                      } else {                        $scope[$scope._COLLECTION_NAME].push(app);                      }                    });                    // $scope[$scope._COLLECTION_NAME] = response.result;                    $scope.requesting = false;                  }, function(response){                    MessageService.handle(response, $translate.instant('error_clients_search'));                    $scope.requesting = false;                  }                );            },            function(response){              MessageService.handle(response, $translate.instant('error_clients_search'));              $scope.requesting = false;            }        );    };    $scope.refresh();    $scope.searchTools = function(query){      $scope.query = 'filter=id,name,version,label,shortDescription,executionSystem,isPublic,revision,lastModified,uuid&';      $scope.query += query;      $scope.refresh();    }      $scope.maybePromptForAuthCredentials = function(resourceType, resource, resourceAction, resourceList, resourceIndex){            if ($localStorage.client && $localStorage.client.username && $localStorage.client.password) {                        // use the public key of the webapp client as the weak key for user credentials        var key = settings.oauth.clients[$localStorage.tenant.code].clientKey;                $scope.username = $localStorage.client.username;                $scope.passwd = EncryptionService.decrypt(key, $localStorage.client.password);        if ($localStorage.tenants) {          initTenants($localStorage.tenants);        }        else {          TenantsController.listTenants().then(              function (response) {                $localStorage.tenants = response;                initTenants(response);              },              function (message) {                Alerts.danger({message: "Failed to retrieve tenant information."});              }          );        }      }            ActionsService.verifyUserCredentials(resourceType, resource, resourceAction, resourceList, resourceIndex);    }    $scope.clone = function(resourceType, resource, resourceAction, resourceList, resourceIndex){      ActionsService.clone(resourceType, resource, resourceAction, resourceList, resourceIndex);    }    $scope.confirmAction = function(resourceType, resource, resourceAction, resourceList, resourceIndex){      ActionsService.confirmAction(resourceType, resource, resourceAction, resourceList, resourceIndex);    }    $scope.edit = function(resourceType, resource){      ActionsService.edit(resourceType, resource);    };    $scope.editPermissions = function(resource, resourceType) {      PermissionsService.editPermissions(resource, resourceType);    }    $scope.getNotifications = function(resourceType, resource){      ActionsService.getNotifications(resourceType, resource);    };    $scope.getSystemName = function(id) {      if (id) {          for(var i=0; i<$scope.systems.length; i++) {              if ($scope.systems[i].id === id) {                  return $scope.systems[i].name;              }          }      }      return id;    };});