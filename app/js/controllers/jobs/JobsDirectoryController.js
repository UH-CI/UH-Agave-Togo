angular.module('AgaveToGo').controller('JobsDirectoryController', function ($scope, $state, $translate, $uibModal, JobsController, ActionsService, MessageService, PermissionsService, NotificationsController) {    $scope._COLLECTION_NAME = 'jobs';    $scope._RESOURCE_NAME = 'job';    $scope.sortType = 'startTime';    $scope.sortReverse  = true;    $scope.query = '';    $scope.refresh = function() {      $scope.requesting = true;      JobsController.searchJobs(        $scope.query      )        .then(          function (response) {            $scope.totalItems = response.result.length;            $scope.pagesTotal = Math.ceil(response.result.length / $scope.limit);            $scope[$scope._COLLECTION_NAME] = response.result;            $scope.requesting = false;          },          function(response){            MessageService.handle(response, $translate.instant('error_jobs_list'));            $scope.requesting = false;          }      );    };    $scope.searchTools = function(query){      $scope.query = query;      $scope.refresh();    };    $scope.browse = function(id){      JobsController.getJobDetails(id)        .then(          function(response){            $state.go('data-explorer', {'systemId': response.result.archiveSystem, path: response.result.archivePath});          },          function(response){            MessageService.handle(response, $translate.instant('error_jobs_list'));            $scope.requesting = false;          }        );    };    $scope.resubmit = function(jobId) {      var resubmitOptions = {        preserveNotifications: false,        ignoreParameterConflicts: false,        ignoreInputConflicts: true,        action: 'resubmit'      };      JobsController.createResubmitJob(resubmitOptions, jobId)        .then(          function(response) {            // hard-wired for now            var websocketNotification = {              associatedUuid: response.result.id,              event: '*',              persistent: true,              url: 'https://9d1e23fc.fanoutcdn.com/fpp'};            var offlineNotification = {              associatedUuid: response.result.id,              event: '*',              persistent: true,              url: 'http://httpbin.org/status/418',              policy: {                retryStrategy: 'NONE',                saveOnFailure: true              }};            NotificationsController.addNotification(websocketNotification)              .then(                function(response){                },                function(response){                  MessageService.handle(response, $translate.instant('error_notifications_add'));                }              );            NotificationsController.addNotification(offlineNotification)              .then(                function(response){                },                function(response){                  MessageService.handle(response, $translate.instant('error_notifications_add'));                }              );            $scope.job = response.result;            $uibModal.open({              templateUrl: "views/apps/resource/job-resubmission-success.html",              scope: $scope,              size: 'lg',              controller: ['$scope', '$modalInstance', function($scope, $modalInstance ) {                $scope.cancel = function()                {                  $modalInstance.dismiss('cancel');                };                $scope.close = function(){                  $modalInstance.close();                }              }]            });            $scope.resetForm();            $scope.requesting = false;          },          function(response) {            MessageService.handle(response, $translate.instant('error_jobs_create'));          });    };    $scope.refresh();    $scope.editPermissions = function(resource, resourceType) {      PermissionsService.editPermissions(resource, resourceType);    }    $scope.confirmAction = function(resourceType, resource, resourceAction, resourceList, resourceIndex){      ActionsService.confirmAction(resourceType, resource, resourceAction, resourceList, resourceIndex);    }});