angular.module('AgaveToGo').controller('SystemDirectoryController', function ($injector, $timeout, $rootScope, $scope, $state, $stateParams, $q, $translate, Commons, SystemsController, SystemActionTypeEnum, RolesService, ActionsService, MessageService) {    $scope.offset = $scope.offset || 0;    $scope.limit = $scope.limit || 50;    $scope.systems = [];    $scope.modalResource = '';    $scope.systemActions = SystemActionTypeEnum;    $scope._COLLECTION_NAME = 'systems';    $scope._RESOURCE_NAME = 'system';    $scope.sortType = 'id';    $scope.sortReverse  = false;    $scope.filter = '';    $scope.query = '';    $scope.getSystemDetails = function(id, callback) {      return SystemsController.getSystemDetails(id).then(        function(response){          return callback(response);        }      );    };    $scope.refresh = function() {        $scope.requesting = true;        SystemsController.searchSystems($scope.query).then(            function (response) {              $scope[$scope._COLLECTION_NAME] = [];              var prom = [];              response.result.forEach(function (system, i) {                  prom.push($scope.getSystemDetails(system.id, function(value){                    $scope[$scope._COLLECTION_NAME].push(value);                  }));              });              $q.all(prom).then(                function () {                  $scope.requesting = false;                },                function(){                  App.alert(                    {                      type: 'danger',                      message: $translate.instant('error_systems_search')                    }                  );                }              );            },            function(response){              MessageService.handle(response, $translate.instant('error_systems_search'));            }        );    };    $scope.searchTools = function(query){      $scope.query = query;      $scope.refresh();    }    $scope.editRoles = function(system) {        RolesService.editRoles(system);    };    $scope.confirmAction = function(resourceType, resource, resourceAction, resourceList, resourceIndex){        ActionsService.confirmAction(resourceType, resource, resourceAction, resourceList, resourceIndex);    }    $scope.clone = function(resourceType, resource, resourceAction, resourceList, resourceIndex){        ActionsService.clone(resourceType, resource, resourceAction, resourceList, resourceIndex);    }    $scope.getNotifications = function(resourceType, resource){      ActionsService.getNotifications(resourceType, resource);    };    $scope.getMonitor = function(resource){      $state.go('monitors-manager', {'systemId': resource.id});    };    $scope.refresh();});