/**
  *AgavePlatformScienceAPILib
  *
  * This file was automatically generated by APIMATIC BETA v2.0 on 10/07/2015
  */

'use strict';
angular.module('AgavePlatformScienceAPILib').factory('NotificationsController',function($q,Configuration,HttpClient,APIHelper){
    return{
        /**
         * Add new notification.
         * @param {NotificationRequest} body    Required parameter: The notification to add.
         *
         * @return {promise<Notification>}
         */
        addNotification : function(body){

            //prepare query string for API call
            var baseUri = Configuration.BASEURI
            var queryBuilder = baseUri + "/notifications/v2/";
            
            //Process query parameters
            queryBuilder = APIHelper.appendUrlWithQueryParameters(queryBuilder, {
                "naked" : true
            });

            //validate and preprocess url
            var queryUrl = APIHelper.cleanUrl(queryBuilder);
            
            //prepare headers
            var headers = {
                "accept" : "application/json",
                "content-type" : "application/json; charset=utf-8",
                "Authorization" : "Bearer " + Configuration.oAuthAccessToken
            };

            //Remove null values
            APIHelper.cleanObject(body);

            //prepare and invoke the API call request to fetch the response
            var config = {
                method : "POST",
                queryUrl : queryUrl,
                headers: headers,
                body : body
            };
            
            var response = HttpClient(config);
                    
            //Create promise to return
            var deffered= $q.defer();
                    
            //process response
            response.then(function(result){
                deffered.resolve(result.body);
            },function(result){
                //Error handling for custom HTTP status codes
                if (code == 400) {
                    deffered.reject(APIHelper.appendContext({errorMessage: "Raised if a user supplies an invalid form", errorCode: 400, errorResponse: result.message},result.getContext()));
                    return;
                } else if (code == 401) {
                    deffered.reject(APIHelper.appendContext({errorMessage: "Raised if the user is not authorized.", errorCode: 401, errorResponse: result.message},result.getContext()));
                    return;
                } else if (code == 403) {
                    deffered.reject(APIHelper.appendContext({errorMessage: "Failed to authenticate the user", errorCode: 403, errorResponse: result.message},result.getContext()));
                    return;
                } else if (code == 500) {
                    deffered.reject(APIHelper.appendContext({errorMessage: "The service was unable to query the notification database", errorCode: 500, errorResponse: result.message},result.getContext()));
                    return;
                }

                deffered.reject(APIHelper.appendContext({errorMessage:"HTTP Response Not OK", errorCode: result.code, errorResponse: result.message},result.getContext()));
            });
            
            return deffered.promise;
        },
        /**
         * Retrieve notification for a specific resource.
         * @param {string} associatedUuid    Required parameter: The uuid of the associated resource. All notifications for this resource visible to the user will be returned.
         * @param {int|null} limit    Optional parameter: The maximum number of results returned from this query
         * @param {int|null} offset    Optional parameter: The number of results skipped in the result set returned from this query
         *
         * @return {promise<array>}
         */
        listNotifications : function(associatedUuid, limit, offset){
            //Assign default values
            limit = limit || 100;
            offset = offset || 0;

            //prepare query string for API call
            var baseUri = Configuration.BASEURI
            var queryBuilder = baseUri + "/notifications/v2/";
            
            //Process query parameters
            queryBuilder = APIHelper.appendUrlWithQueryParameters(queryBuilder, {
                "associatedUuid" : associatedUuid,
                "naked" : true,
                "limit" : (null != limit)? limit: 100,
                "offset" : (null != offset)? offset: 0
            });

            //validate and preprocess url
            var queryUrl = APIHelper.cleanUrl(queryBuilder);
            
            //prepare headers
            var headers = {
                "accept" : "application/json",
                "Authorization" : "Bearer " + Configuration.oAuthAccessToken
            };

            //prepare and invoke the API call request to fetch the response
            var config = {
                method : "GET",
                queryUrl : queryUrl,
                headers: headers,
            };
            
            var response = HttpClient(config);
                    
            //Create promise to return
            var deffered= $q.defer();
                    
            //process response
            response.then(function(result){
                deffered.resolve(result.body);
            },function(result){
                //Error handling for custom HTTP status codes
                if (code == 400) {
                    deffered.reject(APIHelper.appendContext({errorMessage: "Raised if a user does not supply a UUID or supplies an invalid JSON query", errorCode: 400, errorResponse: result.message},result.getContext()));
                    return;
                } else if (code == 401) {
                    deffered.reject(APIHelper.appendContext({errorMessage: "Raised if the user is not authorized.", errorCode: 401, errorResponse: result.message},result.getContext()));
                    return;
                } else if (code == 403) {
                    deffered.reject(APIHelper.appendContext({errorMessage: "Failed to authenticate the user", errorCode: 403, errorResponse: result.message},result.getContext()));
                    return;
                } else if (code == 404) {
                    deffered.reject(APIHelper.appendContext({errorMessage: "The specified notification cannot be found", errorCode: 404, errorResponse: result.message},result.getContext()));
                    return;
                } else if (code == 500) {
                    deffered.reject(APIHelper.appendContext({errorMessage: "The service was unable to query the notification database", errorCode: 500, errorResponse: result.message},result.getContext()));
                    return;
                }

                deffered.reject(APIHelper.appendContext({errorMessage:"HTTP Response Not OK", errorCode: result.code, errorResponse: result.message},result.getContext()));
            });
            
            return deffered.promise;
        },
        /**
         * Retrieve notification.
         * @param {string} uuid    Required parameter: The uuid of the notification item
         *
         * @return {promise<Notification>}
         */
        getNotification : function(uuid){

            //prepare query string for API call
            var baseUri = Configuration.BASEURI
            var queryBuilder = baseUri + "/notifications/v2/{uuid}";
            
            //Process template parameters
            queryBuilder = APIHelper.appendUrlWithTemplateParameters(queryBuilder, {
                "uuid" : uuid
            });

            //Process query parameters
            queryBuilder = APIHelper.appendUrlWithQueryParameters(queryBuilder, {
                "naked" : true
            });

            //validate and preprocess url
            var queryUrl = APIHelper.cleanUrl(queryBuilder);
            
            //prepare headers
            var headers = {
                "accept" : "application/json",
                "Authorization" : "Bearer " + Configuration.oAuthAccessToken
            };

            //prepare and invoke the API call request to fetch the response
            var config = {
                method : "GET",
                queryUrl : queryUrl,
                headers: headers,
            };
            
            var response = HttpClient(config);
                    
            //Create promise to return
            var deffered= $q.defer();
                    
            //process response
            response.then(function(result){
                deffered.resolve(result.body);
            },function(result){
                //Error handling for custom HTTP status codes
                if (code == 400) {
                    deffered.reject(APIHelper.appendContext({errorMessage: "Raised if a user does not supply a UUID", errorCode: 400, errorResponse: result.message},result.getContext()));
                    return;
                } else if (code == 401) {
                    deffered.reject(APIHelper.appendContext({errorMessage: "Raised if the user is not authorized.", errorCode: 401, errorResponse: result.message},result.getContext()));
                    return;
                } else if (code == 403) {
                    deffered.reject(APIHelper.appendContext({errorMessage: "Failed to authenticate the user", errorCode: 403, errorResponse: result.message},result.getContext()));
                    return;
                } else if (code == 404) {
                    deffered.reject(APIHelper.appendContext({errorMessage: "The specified notification cannot be found", errorCode: 404, errorResponse: result.message},result.getContext()));
                    return;
                } else if (code == 500) {
                    deffered.reject(APIHelper.appendContext({errorMessage: "The service was unable to query the notification database", errorCode: 500, errorResponse: result.message},result.getContext()));
                    return;
                }

                deffered.reject(APIHelper.appendContext({errorMessage:"HTTP Response Not OK", errorCode: result.code, errorResponse: result.message},result.getContext()));
            });
            
            return deffered.promise;
        },
        /**
         * Update existing notification.
         * @param {NotificationRequest} body    Required parameter: The notification to update.
         * @param {string} uuid    Required parameter: The uuid of the notification item
         *
         * @return {promise<Notification>}
         */
        updateNotification : function(body, uuid){

            //prepare query string for API call
            var baseUri = Configuration.BASEURI
            var queryBuilder = baseUri + "/notifications/v2/{uuid}";
            
            //Process template parameters
            queryBuilder = APIHelper.appendUrlWithTemplateParameters(queryBuilder, {
                "uuid" : uuid
            });

            //Process query parameters
            queryBuilder = APIHelper.appendUrlWithQueryParameters(queryBuilder, {
                "naked" : true
            });

            //validate and preprocess url
            var queryUrl = APIHelper.cleanUrl(queryBuilder);
            
            //prepare headers
            var headers = {
                "accept" : "application/json",
                "content-type" : "application/json; charset=utf-8",
                "Authorization" : "Bearer " + Configuration.oAuthAccessToken
            };

            //Remove null values
            APIHelper.cleanObject(body);

            //prepare and invoke the API call request to fetch the response
            var config = {
                method : "POST",
                queryUrl : queryUrl,
                headers: headers,
                body : body
            };
            
            var response = HttpClient(config);
                    
            //Create promise to return
            var deffered= $q.defer();
                    
            //process response
            response.then(function(result){
                deffered.resolve(result.body);
            },function(result){
                //Error handling for custom HTTP status codes
                if (code == 400) {
                    deffered.reject(APIHelper.appendContext({errorMessage: "Raised if a user supplies an invalid form", errorCode: 400, errorResponse: result.message},result.getContext()));
                    return;
                } else if (code == 401) {
                    deffered.reject(APIHelper.appendContext({errorMessage: "Raised if the user is not authorized.", errorCode: 401, errorResponse: result.message},result.getContext()));
                    return;
                } else if (code == 403) {
                    deffered.reject(APIHelper.appendContext({errorMessage: "Failed to authenticate the user", errorCode: 403, errorResponse: result.message},result.getContext()));
                    return;
                } else if (code == 500) {
                    deffered.reject(APIHelper.appendContext({errorMessage: "The service was unable to query the notification database", errorCode: 500, errorResponse: result.message},result.getContext()));
                    return;
                }

                deffered.reject(APIHelper.appendContext({errorMessage:"HTTP Response Not OK", errorCode: result.code, errorResponse: result.message},result.getContext()));
            });
            
            return deffered.promise;
        },
        /**
         * Remove notification from the system.
         * @param {string} uuid    Required parameter: The uuid of the notification item
         *
         * @return {promise<void>}
         */
        deleteNotification : function(uuid){

            //prepare query string for API call
            var baseUri = Configuration.BASEURI
            var queryBuilder = baseUri + "/notifications/v2/{uuid}";
            
            //Process template parameters
            queryBuilder = APIHelper.appendUrlWithTemplateParameters(queryBuilder, {
                "uuid" : uuid
            });

            //Process query parameters
            queryBuilder = APIHelper.appendUrlWithQueryParameters(queryBuilder, {
                "naked" : true
            });

            //validate and preprocess url
            var queryUrl = APIHelper.cleanUrl(queryBuilder);
            
            //prepare headers
            var headers = {
                "Authorization" : "Bearer " + Configuration.oAuthAccessToken
            };

            //prepare and invoke the API call request to fetch the response
            var config = {
                method : "DELETE",
                queryUrl : queryUrl,
                headers: headers,
            };
            
            var response = HttpClient(config);
                    
            //Create promise to return
            var deffered= $q.defer();
                    
            //process response
            response.then(function(result){
                deffered.resolve(result.body);
            },function(result){
                //Error handling for custom HTTP status codes
                if (code == 400) {
                    deffered.reject(APIHelper.appendContext({errorMessage: "Raised if a user supplies no UUID", errorCode: 400, errorResponse: result.message},result.getContext()));
                    return;
                } else if (code == 401) {
                    deffered.reject(APIHelper.appendContext({errorMessage: "Raised if the user is not authorized.", errorCode: 401, errorResponse: result.message},result.getContext()));
                    return;
                } else if (code == 403) {
                    deffered.reject(APIHelper.appendContext({errorMessage: "Failed to authenticate the user", errorCode: 403, errorResponse: result.message},result.getContext()));
                    return;
                } else if (code == 500) {
                    deffered.reject(APIHelper.appendContext({errorMessage: "The service was unable to query the notification database", errorCode: 500, errorResponse: result.message},result.getContext()));
                    return;
                }

                deffered.reject(APIHelper.appendContext({errorMessage:"HTTP Response Not OK", errorCode: result.code, errorResponse: result.message},result.getContext()));
            });
            
            return deffered.promise;
        }
    }
});