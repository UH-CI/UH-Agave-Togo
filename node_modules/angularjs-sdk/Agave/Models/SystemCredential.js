/**
 *AgavePlatformScienceAPILib
 *
 * This file was automatically generated by APIMATIC BETA v2.0 on 10/07/2015
 */

function SystemCredential(){
        this.credential = undefined     
        this.expirationDate = undefined     
        this.internalUsername = undefined     
        this.isDefault = undefined     
        this.parentType = undefined     
        this.password = undefined     
        this.publicKey = undefined     
        this.privateKey = undefined     
        this.server = undefined     
        this.type = undefined     
        this.username = undefined     
        this.valid = undefined     
        this.caCerts = undefined     

}

//Make instanceof work

 



/**
 *The credential used to authenticate to the remote system. Depending on the authentication protocol of the remote system, this could be an OAuth Token, X.509 certificate, Kerberose token, or an private key..
 *
 * @return: string
 */
SystemCredential.prototype.getCredential=function(){

        return this.credential;
}
    
    

SystemCredential.prototype.setCredential=function(value){
        this.credential = value;
}
     
 



/**
 *The date the credential expires in ISO 8601 format.
 *
 * @return: DateTime
 */
SystemCredential.prototype.getExpirationDate=function(){

        return this.expirationDate;
}
    
    

SystemCredential.prototype.setExpirationDate=function(value){
        this.expirationDate = value;
}
     
 



/**
 *The username of the internal user associated with this credential.
 *
 * @return: string
 */
SystemCredential.prototype.getInternalUsername=function(){

        return this.internalUsername;
}
    
    

SystemCredential.prototype.setInternalUsername=function(value){
        this.internalUsername = value;
}
     
 



/**
 *Is this the default credential for this internal user of this type on this system?
 *
 * @return: bool
 */
SystemCredential.prototype.getIsDefault=function(){

        return this.isDefault;
}
    
    

SystemCredential.prototype.setIsDefault=function(value){
        this.isDefault = value;
}
     
 



/**
 *The system type this credential is associated with.
 *
 * @return: SystemTypeEnum
 */
SystemCredential.prototype.getParentType=function(){

        return this.parentType;
}
    
    

SystemCredential.prototype.setParentType=function(value){
        this.parentType = value;
}
     
 



/**
 *The password on the remote system used to authenticate.
 *
 * @return: string
 */
SystemCredential.prototype.getPassword=function(){

        return this.password;
}
    
    

SystemCredential.prototype.setPassword=function(value){
        this.password = value;
}
     
 



/**
 *The public ssh key used to authenticate to the remote system.
 *
 * @return: string
 */
SystemCredential.prototype.getPublicKey=function(){

        return this.publicKey;
}
    
    

SystemCredential.prototype.setPublicKey=function(value){
        this.publicKey = value;
}
     
 



/**
 *The public ssh key used to authenticate to the remote system..
 *
 * @return: string
 */
SystemCredential.prototype.getPrivateKey=function(){

        return this.privateKey;
}
    
    

SystemCredential.prototype.setPrivateKey=function(value){
        this.privateKey = value;
}
     
 



/**
 *The server from which a credential may be obtained.
 *
 * @return: SystemAuthConfigServerProtocolTypeEnum
 */
SystemCredential.prototype.getServer=function(){

        return this.server;
}
    
    

SystemCredential.prototype.setServer=function(value){
        this.server = value;
}
     
 



/**
 *The authentication type.
 *
 * @return: AuthenticationTypeEnum
 */
SystemCredential.prototype.getType=function(){

        return this.type;
}
    
    

SystemCredential.prototype.setType=function(value){
        this.type = value;
}
     
 



/**
 *The local username on the remote system used to authenticate.
 *
 * @return: string
 */
SystemCredential.prototype.getUsername=function(){

        return this.username;
}
    
    

SystemCredential.prototype.setUsername=function(value){
        this.username = value;
}
     
 



/**
 *Is the credential still valid or has it expired?.
 *
 * @return: bool
 */
SystemCredential.prototype.getValid=function(){

        return this.valid;
}
    
    

SystemCredential.prototype.setValid=function(value){
        this.valid = value;
}
     
 



/**
 *A public URL to the location of the trusted CA certs to use with this credential.
 *
 * @return: string
 */
SystemCredential.prototype.getCaCerts=function(){

        return this.caCerts;
}
    
    

SystemCredential.prototype.setCaCerts=function(value){
        this.caCerts = value;
}
     





