/**
 *AgavePlatformScienceAPILib
 *
 * This file was automatically generated by APIMATIC BETA v2.0 on 10/07/2015
 */

function Application(){
        this.available = undefined     
        this.checkpointable = undefined     
        this.defaultMaxRunTime = undefined     
        this.defaultMemoryPerNode = undefined     
        this.defaultNodeCount = undefined     
        this.defaultProcessorsPerNode = undefined     
        this.defaultQueue = undefined     
        this.deploymentPath = undefined     
        this.deploymentSystem = undefined     
        this.executionSystem = undefined     
        this.executionType = undefined     
        this.helpURI = undefined     
        this.id = undefined     
        this.icon = undefined     
        this.inputs = undefined     
        this.label = undefined     
        this.lastModified = undefined     
        this.longDescription = undefined     
        this.modules = undefined     
        this.name = undefined     
        this.ontology = undefined     
        this.outputs = undefined     
        this.parallelism = undefined     
        this.parameters = undefined     
        this.isPublic = undefined     
        this.revision = undefined     
        this.shortDescription = undefined     
        this.tags = undefined     
        this.templatePath = undefined     
        this.testPath = undefined     
        this.uuid = undefined     
        this.version = undefined     

}

//Make instanceof work

 



/**
 *Whether the application is available.
 *
 * @return: string
 */
Application.prototype.getAvailable=function(){

        return this.available;
}
    
    

Application.prototype.setAvailable=function(value){
        this.available = value;
}
     
 



/**
 *Whether the application supports checkpointing.
 *
 * @return: string
 */
Application.prototype.getCheckpointable=function(){

        return this.checkpointable;
}
    
    

Application.prototype.setCheckpointable=function(value){
        this.checkpointable = value;
}
     
 



/**
 *The max execution time that should be used if none is given in a job description. Ignore if the system does not support schedulers.
 *
 * @return: string
 */
Application.prototype.getDefaultMaxRunTime=function(){

        return this.defaultMaxRunTime;
}
    
    

Application.prototype.setDefaultMaxRunTime=function(value){
        this.defaultMaxRunTime = value;
}
     
 



/**
 *The default memory in GB to pass to the scheduler if none is given in the job description. This must be less than the max memory parameter in the target queue definition.
 *
 * @return: string
 */
Application.prototype.getDefaultMemoryPerNode=function(){

        return this.defaultMemoryPerNode;
}
    
    

Application.prototype.setDefaultMemoryPerNode=function(value){
        this.defaultMemoryPerNode = value;
}
     
 



/**
 *The number of nodes that should be used if none is given in a job description. Ignore if the system does not support schedulers.
 *
 * @return: string
 */
Application.prototype.getDefaultNodeCount=function(){

        return this.defaultNodeCount;
}
    
    

Application.prototype.setDefaultNodeCount=function(value){
        this.defaultNodeCount = value;
}
     
 



/**
 *The number of processors to pass to the scheduler if none are given in the job description. This must be 1 if the app is serial.
 *
 * @return: string
 */
Application.prototype.getDefaultProcessorsPerNode=function(){

        return this.defaultProcessorsPerNode;
}
    
    

Application.prototype.setDefaultProcessorsPerNode=function(value){
        this.defaultProcessorsPerNode = value;
}
     
 



/**
 *The queue on the execution system that should be used if none is given in a job description. Ignore if the system does not support schedulers.
 *
 * @return: string
 */
Application.prototype.getDefaultQueue=function(){

        return this.defaultQueue;
}
    
    

Application.prototype.setDefaultQueue=function(value){
        this.defaultQueue = value;
}
     
 



/**
 *The location in the user's default storage system containing the application wrapper and dependencies.
 *
 * @return: string
 */
Application.prototype.getDeploymentPath=function(){

        return this.deploymentPath;
}
    
    

Application.prototype.setDeploymentPath=function(value){
        this.deploymentPath = value;
}
     
 



/**
 *The system id of the storage system where this app should run.
 *
 * @return: string
 */
Application.prototype.getDeploymentSystem=function(){

        return this.deploymentSystem;
}
    
    

Application.prototype.setDeploymentSystem=function(value){
        this.deploymentSystem = value;
}
     
 



/**
 *The system id of the execution system where this app should run.
 *
 * @return: string
 */
Application.prototype.getExecutionSystem=function(){

        return this.executionSystem;
}
    
    

Application.prototype.setExecutionSystem=function(value){
        this.executionSystem = value;
}
     
 



/**
 *The execution type of the application. If you're unsure, it's probably HPC.
 *
 * @return: string
 */
Application.prototype.getExecutionType=function(){

        return this.executionType;
}
    
    

Application.prototype.setExecutionType=function(value){
        this.executionType = value;
}
     
 



/**
 *The URL where users can go for more information about the app.
 *
 * @return: string
 */
Application.prototype.getHelpURI=function(){

        return this.helpURI;
}
    
    

Application.prototype.setHelpURI=function(value){
        this.helpURI = value;
}
     
 



/**
 *Unique id of this app. Comprised of the app name-version.
 *
 * @return: string
 */
Application.prototype.getId=function(){

        return this.id;
}
    
    

Application.prototype.setId=function(value){
        this.id = value;
}
     
 



/**
 *The icon to associate with this app.
 *
 * @return: string
 */
Application.prototype.getIcon=function(){

        return this.icon;
}
    
    

Application.prototype.setIcon=function(value){
        this.icon = value;
}
     
 



/**
 *The inputs files for this application. 
 *
 * @return: string
 */
Application.prototype.getInputs=function(){

        return this.inputs;
}
    
    

Application.prototype.setInputs=function(value){
        this.inputs = value;
}
     
 



/**
 *The label to use when generating forms.
 *
 * @return: string
 */
Application.prototype.getLabel=function(){

        return this.label;
}
    
    

Application.prototype.setLabel=function(value){
        this.label = value;
}
     
 



/**
 *The date this application was last modified in ISO 8601 format.
 *
 * @return: string
 */
Application.prototype.getLastModified=function(){

        return this.lastModified;
}
    
    

Application.prototype.setLastModified=function(value){
        this.lastModified = value;
}
     
 



/**
 *The full text description of this input to use when generating forms.
 *
 * @return: string
 */
Application.prototype.getLongDescription=function(){

        return this.longDescription;
}
    
    

Application.prototype.setLongDescription=function(value){
        this.longDescription = value;
}
     
 



/**
 *An array of modules to load prior to the execution of the application.
 *
 * @return: string
 */
Application.prototype.getModules=function(){

        return this.modules;
}
    
    

Application.prototype.setModules=function(value){
        this.modules = value;
}
     
 



/**
 *The name of the application. The name does not have to be unique, but the combination of name and version does.
 *
 * @return: string
 */
Application.prototype.getName=function(){

        return this.name;
}
    
    

Application.prototype.setName=function(value){
        this.name = value;
}
     
 



/**
 *An array of ontology values describing this application.
 *
 * @return: string
 */
Application.prototype.getOntology=function(){

        return this.ontology;
}
    
    

Application.prototype.setOntology=function(value){
        this.ontology = value;
}
     
 



/**
 *The outputs files for this application. 
 *
 * @return: string
 */
Application.prototype.getOutputs=function(){

        return this.outputs;
}
    
    

Application.prototype.setOutputs=function(value){
        this.outputs = value;
}
     
 



/**
 *The parallelism type of the application. If you're unsure, it's probably SERIAL.
 *
 * @return: string
 */
Application.prototype.getParallelism=function(){

        return this.parallelism;
}
    
    

Application.prototype.setParallelism=function(value){
        this.parallelism = value;
}
     
 



/**
 *The inputs parameters for this application. 
 *
 * @return: string
 */
Application.prototype.getParameters=function(){

        return this.parameters;
}
    
    

Application.prototype.setParameters=function(value){
        this.parameters = value;
}
     
 



/**
 *Whether the application is public or private.
 *
 * @return: string
 */
Application.prototype.getIsPublic=function(){

        return this.isPublic;
}
    
    

Application.prototype.setIsPublic=function(value){
        this.isPublic = value;
}
     
 



/**
 *The number of times this application has been revised.
 *
 * @return: string
 */
Application.prototype.getRevision=function(){

        return this.revision;
}
    
    

Application.prototype.setRevision=function(value){
        this.revision = value;
}
     
 



/**
 *The short description of this application.
 *
 * @return: string
 */
Application.prototype.getShortDescription=function(){

        return this.shortDescription;
}
    
    

Application.prototype.setShortDescription=function(value){
        this.shortDescription = value;
}
     
 



/**
 *An array of tags related to this application.
 *
 * @return: string
 */
Application.prototype.getTags=function(){

        return this.tags;
}
    
    

Application.prototype.setTags=function(value){
        this.tags = value;
}
     
 



/**
 *The path to the wrapper script relative to the deploymentPath.
 *
 * @return: string
 */
Application.prototype.getTemplatePath=function(){

        return this.templatePath;
}
    
    

Application.prototype.setTemplatePath=function(value){
        this.templatePath = value;
}
     
 



/**
 *The path to the test script relative to the deploymentPath.
 *
 * @return: string
 */
Application.prototype.getTestPath=function(){

        return this.testPath;
}
    
    

Application.prototype.setTestPath=function(value){
        this.testPath = value;
}
     
 



/**
 *The UUID of this application. UUID are 36 alphanumeric string.
 *
 * @return: string
 */
Application.prototype.getUuid=function(){

        return this.uuid;
}
    
    

Application.prototype.setUuid=function(value){
        this.uuid = value;
}
     
 



/**
 *The version of the application in #.#.# format. While the version does not need to be unique, the combination of name and version does have to be unique.
 *
 * @return: string
 */
Application.prototype.getVersion=function(){

        return this.version;
}
    
    

Application.prototype.setVersion=function(value){
        this.version = value;
}
     





