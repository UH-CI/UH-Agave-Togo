/**
 *AgavePlatformScienceAPILib
 *
 * This file was automatically generated by APIMATIC BETA v2.0 on 10/07/2015
 */

function SystemRequest(){
        this.description = undefined     
        this.environment = undefined     
        this.executionType = undefined     
        this.id = undefined     
        this.login = undefined     
        this.maxSystemJobs = undefined     
        this.maxSystemJobsPerUser = undefined     
        this.name = undefined     
        this.queues = undefined     
        this.scheduler = undefined     
        this.scratchDir = undefined     
        this.site = undefined     
        this.startupScript = undefined     
        this.status = undefined     
        this.storage = undefined     
        this.type = undefined     
        this.workDir = undefined     

}

//Make instanceof work

 



/**
 *Verbose description of this system.
 *
 * @return: string|null
 */
SystemRequest.prototype.getDescription=function(){

        return this.description;
}
    
    

SystemRequest.prototype.setDescription=function(value){
        this.description = value;
}
     
 



/**
 *Environment variables to set upon login prior to job submission.
 *
 * @return: string|null
 */
SystemRequest.prototype.getEnvironment=function(){

        return this.environment;
}
    
    

SystemRequest.prototype.setEnvironment=function(value){
        this.environment = value;
}
     
 



/**
 *The execution paradigm used to run jobs on this system.
 *
 * @return: SystemExecutionTypeEnum|null
 */
SystemRequest.prototype.getExecutionType=function(){

        return this.executionType;
}
    
    

SystemRequest.prototype.setExecutionType=function(value){
        this.executionType = value;
}
     
 



/**
 *Unique identifier for this system.
 *
 * @return: string
 */
SystemRequest.prototype.getId=function(){

        return this.id;
}
    
    

SystemRequest.prototype.setId=function(value){
        this.id = value;
}
     
 



/**
 *The login config defining how to connect to this system for job submission.
 *
 * @return: SystemLoginConfig|null
 */
SystemRequest.prototype.getLogin=function(){

        return this.login;
}
    
    

SystemRequest.prototype.setLogin=function(value){
        this.login = value;
}
     
 



/**
 *The maximum number of jobs that can be simultaneously run on the system across all queues.
 *
 * @return: int|null
 */
SystemRequest.prototype.getMaxSystemJobs=function(){

        return this.maxSystemJobs;
}
    
    

SystemRequest.prototype.setMaxSystemJobs=function(value){
        this.maxSystemJobs = value;
}
     
 



/**
 *The maximum number of jobs that can be simultaneously run on the system across all queues by a single user.
 *
 * @return: int|null
 */
SystemRequest.prototype.getMaxSystemJobsPerUser=function(){

        return this.maxSystemJobsPerUser;
}
    
    

SystemRequest.prototype.setMaxSystemJobsPerUser=function(value){
        this.maxSystemJobsPerUser = value;
}
     
 



/**
 *Common name for this system.
 *
 * @return: string
 */
SystemRequest.prototype.getName=function(){

        return this.name;
}
    
    

SystemRequest.prototype.setName=function(value){
        this.name = value;
}
     
 



/**
 *The execution paradigm used to run jobs on this system.
 *
 * @return: array|null
 */
SystemRequest.prototype.getQueues=function(){

        return this.queues;
}
    
    

SystemRequest.prototype.setQueues=function(value){
        this.queues = value;
}
     
 



/**
 *The type of scheduled used to run jobs.
 *
 * @return: BatchSchedulerTypeEnum|null
 */
SystemRequest.prototype.getScheduler=function(){

        return this.scheduler;
}
    
    

SystemRequest.prototype.setScheduler=function(value){
        this.scheduler = value;
}
     
 



/**
 *The scratch directory where job execution directories will be created at runtime. The workDir is used if this is not specified.
 *
 * @return: string|null
 */
SystemRequest.prototype.getScratchDir=function(){

        return this.scratchDir;
}
    
    

SystemRequest.prototype.setScratchDir=function(value){
        this.scratchDir = value;
}
     
 



/**
 *The site associated with this system.
 *
 * @return: string|null
 */
SystemRequest.prototype.getSite=function(){

        return this.site;
}
    
    

SystemRequest.prototype.setSite=function(value){
        this.site = value;
}
     
 



/**
 *Script to be run after login and prior to execution.
 *
 * @return: string|null
 */
SystemRequest.prototype.getStartupScript=function(){

        return this.startupScript;
}
    
    

SystemRequest.prototype.setStartupScript=function(value){
        this.startupScript = value;
}
     
 



/**
 *The functional status of this system. Systems must be in UP status to be used.
 *
 * @return: SystemStatusTypeEnum
 */
SystemRequest.prototype.getStatus=function(){

        return this.status;
}
    
    

SystemRequest.prototype.setStatus=function(value){
        this.status = value;
}
     
 



/**
 *The storage config defining how to connect to this system for data staging.
 *
 * @return: SystemStorageConfig
 */
SystemRequest.prototype.getStorage=function(){

        return this.storage;
}
    
    

SystemRequest.prototype.setStorage=function(value){
        this.storage = value;
}
     
 



/**
 *The type of this system.
 *
 * @return: SystemTypeEnum
 */
SystemRequest.prototype.getType=function(){

        return this.type;
}
    
    

SystemRequest.prototype.setType=function(value){
        this.type = value;
}
     
 



/**
 *The work directory where job execution directories will be created at runtime. This is used if scratchDir is not specified. If neither are specified, the job directory will be created in the system homeDir.
 *
 * @return: string|null
 */
SystemRequest.prototype.getWorkDir=function(){

        return this.workDir;
}
    
    

SystemRequest.prototype.setWorkDir=function(value){
        this.workDir = value;
}
     





