/**
 *AgavePlatformScienceAPILib
 *
 * This file was automatically generated by APIMATIC BETA v2.0 on 10/07/2015
 */

function SystemStorageConfig(){
        this.auth = undefined     
        this.containerName = undefined     
        this.homeDir  = "/"     
        this.host = undefined     
        this.port = undefined     
        this.mirror  = false     
        this.protocol = undefined     
        this.publicAppsDir = undefined     
        this.resource = undefined     
        this.rootDir  = "/"     
        this.zone = undefined     

}

//Make instanceof work

 



/**
 *The default authentication credential used for this system.
 *
 * @return: SystemAuthConfig
 */
SystemStorageConfig.prototype.getAuth=function(){

        return this.auth;
}
    
    

SystemStorageConfig.prototype.setAuth=function(value){
        this.auth = value;
}
     
 



/**
 *The name of the bucket to interact with when using an object store.
 *
 * @return: string|null
 */
SystemStorageConfig.prototype.getContainerName=function(){

        return this.containerName;
}
    
    

SystemStorageConfig.prototype.setContainerName=function(value){
        this.containerName = value;
}
     
 



/**
 *The path on the remote system to use as the home directory for all API requests. For cases where the home directory should be dynamically defined, the ${USERNAME} token can be included in the homeDir value to represent the username of the authenticated user. ex. /home/${USERNAME}.
 *
 * @return: string|null
 */
SystemStorageConfig.prototype.getHomeDir=function(){

        return this.homeDir;
}
    
    

SystemStorageConfig.prototype.setHomeDir=function(value){
        this.homeDir = value;
}
     
 



/**
 *The hostname or ip address of the storage server
 *
 * @return: string
 */
SystemStorageConfig.prototype.getHost=function(){

        return this.host;
}
    
    

SystemStorageConfig.prototype.setHost=function(value){
        this.host = value;
}
     
 



/**
 *The port number of the storage server.
 *
 * @return: int
 */
SystemStorageConfig.prototype.getPort=function(){

        return this.port;
}
    
    

SystemStorageConfig.prototype.setPort=function(value){
        this.port = value;
}
     
 



/**
 *Whether the permissions set on the server should be pushed to the storage system itself. This only applies to IRODS and AWS systems.
 *
 * @return: bool|null
 */
SystemStorageConfig.prototype.getMirror=function(){

        return this.mirror;
}
    
    

SystemStorageConfig.prototype.setMirror=function(value){
        this.mirror = value;
}
     
 



/**
 *The protocol used to authenticate to the storage server.
 *
 * @return: SystemStorageProtocolTypeEnum
 */
SystemStorageConfig.prototype.getProtocol=function(){

        return this.protocol;
}
    
    

SystemStorageConfig.prototype.setProtocol=function(value){
        this.protocol = value;
}
     
 



/**
 *The path on the remote system where apps will be stored if this is set as the default public storage system.
 *
 * @return: string|null
 */
SystemStorageConfig.prototype.getPublicAppsDir=function(){

        return this.publicAppsDir;
}
    
    

SystemStorageConfig.prototype.setPublicAppsDir=function(value){
        this.publicAppsDir = value;
}
     
 



/**
 *The name of the target resource when defining an IRODS system.
 *
 * @return: string|null
 */
SystemStorageConfig.prototype.getResource=function(){

        return this.resource;
}
    
    

SystemStorageConfig.prototype.setResource=function(value){
        this.resource = value;
}
     
 



/**
 *The path on the remote system to use as the root for all API requests.
 *
 * @return: string|null
 */
SystemStorageConfig.prototype.getRootDir=function(){

        return this.rootDir;
}
    
    

SystemStorageConfig.prototype.setRootDir=function(value){
        this.rootDir = value;
}
     
 



/**
 *The name of the zone when defining an IRODS system.
 *
 * @return: string|null
 */
SystemStorageConfig.prototype.getZone=function(){

        return this.zone;
}
    
    

SystemStorageConfig.prototype.setZone=function(value){
        this.zone = value;
}
     





